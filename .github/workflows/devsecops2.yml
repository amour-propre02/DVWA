name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  # ======================================================
  # 1️⃣ Static Application Security Testing (SAST)
  # ======================================================
  sast:
    name: Static Application Security Testing (Semgrep)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep SAST scan
        run: semgrep --config auto . || true


  # ======================================================
  # 2️⃣ Build & Deploy DVWA (Docker)
  # ======================================================
  build-and-deploy:
    name: Build & Deploy DVWA
    runs-on: ubuntu-latest
    needs: sast

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Create Docker network
        run: docker network create dvwa-net

      - name: Pull MySQL image
        run: docker pull mysql:5.7

      - name: Start MySQL container
        run: |
          docker run -d --name mysql \
            --network dvwa-net \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=dvwa \
            mysql:5.7

      - name: Wait for MySQL to initialize
        run: sleep 90

      - name: Build DVWA Docker image
        run: docker build -t dvwa .

      - name: Run DVWA container
        run: |
          docker run -d -p 8080:80 --name dvwa \
            --network dvwa-net \
            -e MYSQL_PASS=root \
            dvwa

      - name: Wait for DVWA to start
        run: sleep 60

      - name: Verify DVWA is running
        run: curl -I http://localhost:8080 || true

      # OPTIONAL: Push to Docker Hub
      - name: Login to Docker Hub
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag & Push Image to Docker Hub
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        run: |
          docker tag dvwa ${{ secrets.DOCKERHUB_USERNAME }}/dvwa:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/dvwa:latest


  # ======================================================
  # 3️⃣ Dynamic Application Security Testing (DAST)
  # ======================================================
  dast:
    name: Dynamic Security Testing (OWASP ZAP)
    runs-on: ubuntu-latest
    needs: build-and-deploy

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Login to Docker Hub (for image pulls)
        if: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Create Docker network
        run: docker network create dvwa-net

      - name: Pull required images
        run: |
          docker pull mysql:5.7
          docker pull vulnerables/web-dvwa
          docker pull owasp/zap2docker-stable
        # Give time for large images to download
      - name: Wait for images to download
        run: sleep 60

      - name: Start MySQL container
        run: |
          docker run -d --name mysql \
            --network dvwa-net \
            -e MYSQL_ROOT_PASSWORD=root \
            -e MYSQL_DATABASE=dvwa \
            mysql:5.7

      - name: Wait for MySQL to be ready
        run: sleep 90

      - name: Start DVWA container
        run: |
          docker run -d -p 8080:80 \
            --name dvwa \
            --network dvwa-net \
            -e MYSQL_PASS=root \
            vulnerables/web-dvwa

      - name: Wait for DVWA initialization
        run: sleep 60

      - name: Run OWASP ZAP Baseline Scan
        run: |
          mkdir -p reports
          docker run --network host \
            -v $(pwd)/reports:/zap/wrk/:rw \
            owasp/zap2docker-stable zap-baseline.py \
            -t http://localhost:8080 \
            -r zap_report.html -l MEDIUM

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: reports/zap_report.html
